tags:
- name: "post"
  description: "Everything about post"
- name: "user"
  description: "Everything about user"
- name: "externalAPI"
  description: "Everything about external API"
schemes:
- "http"
paths:
  /user/profile:
    put:
      tags:
      - "user"
      summary: "user 정보 업데이트"
      prodeces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userInfo"
        description: "update 할 유저 정보"
        required: true
        schema:
          $ref: "#definitions/userInfo"
      responses:
        200:
          description: "Success"
        401:
          description: "unauthorized"
        400:
          description: "bad request, params 확인"
  /user/myinfo:
    get:
      tags:
      - "user"
      summary: "user 정보 보내기"
      prodeces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              id:
                type: "number"
              profileImage:
                type: "string"
              email:
                type: "string"
              phone:
                type: "string"
              nickname:
                type: "string"
              description:
                type: "string"
        400:
          description: "Bad Request. JWT 가 유요하지 않음"
        500:
          description: "Internal Server Error"
  /user/profile-content?id={user id}:
    get:
      tags:
      - "user"
      summary: "user의 개인 페이지에서 보여질 profile content info"
      prodeces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        description: "가져오고자 하는 유저의 id"
        required: true
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#definitions/profileContent"
        400:
          description: "Bad Request\n id 를 가진 user가 없음"
        500:
          description: "Internal Server Error"
  /user/follow/{userid}:
    post:
      tags:
        - "user"
      summary: "follow 요청"
      prodeces:
      - "application/json"
      parameters:
      - in: "query"
        name: "user id"
        description: "follow 할 user id"
        required: true
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request\n user id 가 없거나 잘못되었음"
        401:
          description: "유효하지 않은 토큰"
        500:
          description: "Internal Server Error"
    delete:
      tags:
        - "user"
      summary: "follow 취소"
      prodeces:
      - "application/json"
      parameters:
      - in: "query"
        name: "user id"
        description: "follow 취소 할 user id"
        required: true
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request\n user id 가 없거나 잘못되었음"
        401:
          description: "유효하지 않은 토큰"
        500:
          description: "Internal Server Error"
  /post:
    post:
      tags:
        - "post"
      summary: "post 등록"
      prodeces:
      - "application/json"
      parameters:
      - in: "body"
        name: "post-info"
        description: "등록할 포스트 정보"
        require: true
        schema:
          $ref: "#/definitions/uploadingPost"
      responses:
        200:
          description: "Success"
        401:
          description: "unauthorized, 로그인 안한 회원"
        500:
          description: "Internal Server Error"
  /post?page={page number}&writerid={writer id}:
    get:
      tags:
      - "post"
      summary: "각 페이지당 최대 20개의 포스트를 전달한다."
      prodeces:
      - "application/json"
      parameters:
      - in: "query"
        name: "page"
        description: "page number minimum 1"
        required: true
      - in: "query"
        name: "writer id"
        description: "특정 유저가 작성한 Post 만 가져오고 싶을 때 writer id 를 입력"
        required: false
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              hasNextPage:
                type: "boolean"
              posts:
                type: "array"
                items:
                  $ref: "#definitions/postThumbnailInfo"
        204:
          description: "No Contents.\n해당 page의 post가 없다."
        400:
          description: "Bad Request.\n잘못된 page number"
        500:
          description: "Internal Server Error"
  /post/{post id}:
    get:
      tags:
      - "post"
      summary: "get full post info by post id"
      description: "Return full post info"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        description: "post id"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/fullPostInfo"
        400:
          description: "Bad Request.\npost id가 없다."
        404:
          description: "Not found.\n해당 post id의 post가 없다."
    delete:
      tags:
      - "post"
      summary: "delete post"
      description: "post delete"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        description: "post id"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "number"
        400:
          description: "Bad Request.\npost id가 없다."
        401:
          description: "unauthorized"
        500:
          description: "internal server error"
  /post/related-to?postid={post id}&page={page number}:
    get:
      tags:
      - "post"
      summary: "get post list related to post id"
      description: "해당 post id 와 같은 장소인 길이가 최대 20인 Post List 를 리턴한다."
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "post-id"
        description: "post id"
        required: true
      - in: "query"
        name: "page"
        description: "page number"
        required: true
      responses:
        200:
          description: "Ok"
          schema:
            type: "object"
            properties:
              hasNextPage:
                type: "boolean"
              posts:
                type: "array"
                items:
                  $ref: "#/definitions/relatedPost"
        204:
          description: "No Contents.\n해당 장소에 다른 게시글이 없을 때\npage number 가 커서 더이상 글이 없을 때\n존재 하지 않는 post id 일 때"
        400:
          description: "Bad Request.\n요청에 post id or page number 가 없을 때"
  /auth/kakao:
    get:
      tags:
      - "auth"
      summary: "kakao OAuth 로그인"
      description: "유저 승인시 /auth/kakao/callback 으로 redirect."
      produces:
      - "application/json"
      responses:
        301:
          description: "/auth/kakao/callback 으로 이동"
  /auth/kakao/callback:
    get:
      tags:
      - "auth"
      summary: "kakao OAuth 로그인"
      description: "kakao 에서 받은 정보로 로그인\n성공시 : 쿠키에 토큰 발급, 이전페이지로 이동\n실패시 : 이전 주소로 redirect\n회원가입필요시 : 임시 토큰 쿠키에 발급, 회원가입 페이지로 이동"
      produces:
      - "application/json"
      responses:
        302:
          description: "이전 페이지로 이동\n회원가입 페이지로 이동"
  /auth/signup:
    post:
      tags:
      - "auth"
      summary: "nickname post, 회원가입"
      description: "**fetch 에 {credentials: 'include'} 옵션 필요**\n닉네임 입력하고 회원가입한다."
      prodeces:
      - "application/json"
      parameters:
      - in: "body"
        name: "nickname"
        description: "회원가입하는 nickname"
        required: true
      responses:
        200:
          description: "회원가입 성공\n토큰발급\n리다이렉트 할  referer 를 응답"
          schema:
              $ref: "#definitions/referer"
        400:
          description: "nickname 이 없음"
        401:
          description: "유효하지 않은 token"        
  /validate/tempToken:
    post:
      tags:
      - "validate"
      summary: "임시토큰 검증"
      description: "**fetch 에 {credentials: 'include'} 옵션 필요**\n임시토큰을 검증한다"
      prodeces:
      - "application/json"
      parameters:
      responses:
        200:
          description: "검증된 토큰"
          schema:
              $ref: "#definitions/provider"
        401:
          description: "유효하지 않은 token"        
  /validate/nickname:
    post:
      tags:
      - "validate"
      summary: "닉네임 중복검사"
      description: "닉네임 중복검사한다."
      prodeces:
      - "application/json"
      parameters:
      - in: "body"
        name: "nickname"
        description: "검사 하려는 nickname"
        required: true
      responses:
        200:
          description: "사용 가능한 닉네임"
        400:
          description: "요청에 nickname 이 없음\n닉네임에 공백이 있음"
        409:
          description: "중복된 닉네임"        
        500:
          description: "서버 에러"      
  /auth/logout:
    post:
      tags:
      - "auth"
      summary: "로그아웃"
      description: "**fetch 에 {credentials: 'include'} 옵션 필요**\n토큰삭제하고 유저를 로그아웃 시킨다."
      prodeces:
      - "application/json"
      parameters:
      responses:
        200:
          description: "로그아웃성공\n리다이렉트 할  referer 를 응답"
          schema:
              $ref: "#definitions/referer"
  /externalAPI/naver-search?query={query}:
    get:
      tags:
        - "externalAPI"
      summary: "네이버 검색 API"
      description: "네이버 검색 API사용. 검색어 query로 입력"
      prodeces:
      - "application/json"
      parameters:
      - in: "query"
        name: "query"
        description: "검색할 단어"
        required: true
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#definitions/naverSearch"
        400:
          description: "Bad Request\n query가 없음"
        500:
          description: "Internal Server Error"  
  /auth/has-logged-in:
    get:
      tags:
      - "auth"
      summary: "로그인 확인"
      description: "**fetch 에 {credentials: 'include'} 옵션 필요**\n로그인 여부를 확인하고, 로그인 시 id, nickname, profileImage를 응답한다."
      prodeces:
      - "application/json"
      parameters:
      responses:
        200:
          description: "로그인 상태\nid, nickname, profileImage를 준다"
          schema:
              $ref: "#definitions/tokenInfo"
        401:
          description: "로그인 상태가 아님"
definitions:
  uploadingPost:
    type: "object"
    properties:
      location:
        type: "object"
        properties:
          name:
            type: "string"
          latitude:
            type: "number"
          longitude:
            type: "number"
          address:
            type: "string"
          link:
            type: "string"
          phone:
            type: "string"
      post:
        type: "object"
        properties:
          title_location:
            type: "string"
          title_companion:
            type: "string"
          title_activity:
            type: "string"
          description:
            type: "string"
          images:
            type: "array"
            items:
              type: "object"
              properties:
                url:
                  type: "string"
                is_representative:
                  type: "boolean"
  fullPostInfo:
    type: "object"
    properties:
      titlePlace:
        type: "string"
      titleCompanion:
        type: "string"
      titleActivity:
        type: "string"
      description:
        type: "string"
      postImageURLs:
        type: "array"
        items:
          type: "string"
      writerNickname:
        type: "string"
      writerImageURL:
        type: "string"
      locationLatitude:
        type: "number"
        format: "float"
      locationLongitude:
        type: "number"
        format: "float"
      locationAddress:
        type: "string"
      locationPhoneNumber:
        type: "string"
      locationLinkAddress:
        type: "string"
  relatedPost:
    type: "object"
    properties:
      profileImageURL:
        type: "string"
      titleCompanion:
        type: "string"
      titleActivity:
        type: "string"
      postId:
        type : "number"
  postThumbnailInfo:
    type: "object"
    properties:
      postId:
        type: "number"
      writerImageURL:
        type: "string"
      writerNickname:
        type: "string"
      representativePostImageURL:
        type: "string"
      titlePlace:
        type: "string"
      titleCompanion:
        type: "string"
      titleActivity:
        type: "string"
      description:
        type: "string"
  profileContent:
    type: "object"
    properties:
      isMyProfile:
        type: "boolean"
      nickname:
        type: "string"
      totalPost:
        type: "number"
      totalFollower:
        type: "number"
      totalFollowing:
        type: "number"
      introduction:
        type: "string"
      profileImage:
        type: "string"
  naverSearch:
    type: "object"
    properties:
      lastBuildDate:
        type: "string"
      total:
        type: "number"
      start:
        type: "number"
      display:
        type: "number"
      items:
        type: "array"
        items:
          type: "object"
          properties:
            title:
              type: "string"
            link:
              type: "string"
            category:
              type: "string"
            description:
              type: "string"
            telephone:
              type: "string"
            address:
              type: "string"
            roadAddress:
              type: "string"
            mapx:
              type: "string"
            mapy:
              type: "string"
  provider:
    type: "object"
    properties:
      provider:
        type: "string"
  referer:
    type: "object"
    properties:
      referer:
        type: "string"
  tokenInfo:
    type: "object"
    properties:
      id:
        type: "number"
      nickname:
        type: "string"
      profileImage:
        type: "string"
  userInfo:
    type: "object"
    properties:
      nickname:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      profile_image:
        type: "string"
      description:
        type: "string"